syntax = "proto3";
package GrpcEngine;

option go_package = "github.com/zsmartex/pkg/proto";

import "google/protobuf/timestamp.proto";
import "utils.proto";

message FetchOrderRequest {
  int64 id = 1;
  string symbol = 2;
  string side = 3;
  bytes uuid = 4;
  GrpcUtils.Decimal price = 5;
  GrpcUtils.Decimal stop_price = 6;
  bool fake = 7;
  google.protobuf.Timestamp created_at = 8;
}

message FetchOrderResponse {
  int64 id = 1;
  bytes uuid = 2;
  int64 member_id = 3;
  string symbol = 4;
  string side = 5;
  string type = 6;
  GrpcUtils.Decimal price = 7;
  GrpcUtils.Decimal stop_price = 8;
  GrpcUtils.Decimal quantity = 9;
  GrpcUtils.Decimal filled_quantity = 10;
  bool fake = 11;
  bool cancelled = 12;
  google.protobuf.Timestamp created_at = 13;
}

message FetchOpenOrdersRequest {
  string symbol = 1;
  string side = 2;
}

message BookOrder {
  repeated GrpcUtils.Decimal price_quantity = 1;
}

message FetchOrderBookRequest {
  string symbol = 1;
  int64 limit = 2;
}

message FetchOrderBookResponse {
  string symbol = 1;
  repeated BookOrder Bids = 2;
  repeated BookOrder Asks = 3;
  int64 sequence = 4;
}

message CalcMarketOrderRequest {
  string symbol = 1;
  string side = 2;
  GrpcUtils.Decimal quantity = 3;
  GrpcUtils.Decimal volume = 4;
}

message CalcMarketOrderResponse {
  GrpcUtils.Decimal quantity = 1;
  GrpcUtils.Decimal locked = 2;
}

message FetchMarketPriceRequest {
  string symbol = 1;
}

message FetchMarketPriceResponse {
  GrpcUtils.Decimal price = 1;
}

service MatchingEngineService {
  rpc FetchOrder(FetchOrderRequest) returns (FetchOrderResponse) {}
  rpc FetchOrderBook(FetchOrderBookRequest) returns (FetchOrderBookResponse) {}
  rpc CalcMarketOrder(CalcMarketOrderRequest) returns (CalcMarketOrderResponse) {}
  rpc FetchMarketPrice(FetchMarketPriceRequest) returns (FetchMarketPriceResponse) {}
}
