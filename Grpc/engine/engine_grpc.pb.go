// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/engine.proto

package GrpcEngine

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MatchingEngineServiceClient is the client API for MatchingEngineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchingEngineServiceClient interface {
	FetchOrder(ctx context.Context, in *FetchOrderRequest, opts ...grpc.CallOption) (*FetchOrderResponse, error)
	FetchOrderBook(ctx context.Context, in *FetchOrderBookRequest, opts ...grpc.CallOption) (*FetchOrderBookResponse, error)
	CalcMarketOrder(ctx context.Context, in *CalcMarketOrderRequest, opts ...grpc.CallOption) (*CalcMarketOrderResponse, error)
	FetchMarketPrice(ctx context.Context, in *FetchMarketPriceRequest, opts ...grpc.CallOption) (*FetchMarketPriceResponse, error)
}

type matchingEngineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchingEngineServiceClient(cc grpc.ClientConnInterface) MatchingEngineServiceClient {
	return &matchingEngineServiceClient{cc}
}

func (c *matchingEngineServiceClient) FetchOrder(ctx context.Context, in *FetchOrderRequest, opts ...grpc.CallOption) (*FetchOrderResponse, error) {
	out := new(FetchOrderResponse)
	err := c.cc.Invoke(ctx, "/GrpcEngine.MatchingEngineService/FetchOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchingEngineServiceClient) FetchOrderBook(ctx context.Context, in *FetchOrderBookRequest, opts ...grpc.CallOption) (*FetchOrderBookResponse, error) {
	out := new(FetchOrderBookResponse)
	err := c.cc.Invoke(ctx, "/GrpcEngine.MatchingEngineService/FetchOrderBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchingEngineServiceClient) CalcMarketOrder(ctx context.Context, in *CalcMarketOrderRequest, opts ...grpc.CallOption) (*CalcMarketOrderResponse, error) {
	out := new(CalcMarketOrderResponse)
	err := c.cc.Invoke(ctx, "/GrpcEngine.MatchingEngineService/CalcMarketOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchingEngineServiceClient) FetchMarketPrice(ctx context.Context, in *FetchMarketPriceRequest, opts ...grpc.CallOption) (*FetchMarketPriceResponse, error) {
	out := new(FetchMarketPriceResponse)
	err := c.cc.Invoke(ctx, "/GrpcEngine.MatchingEngineService/FetchMarketPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchingEngineServiceServer is the server API for MatchingEngineService service.
// All implementations should embed UnimplementedMatchingEngineServiceServer
// for forward compatibility
type MatchingEngineServiceServer interface {
	FetchOrder(context.Context, *FetchOrderRequest) (*FetchOrderResponse, error)
	FetchOrderBook(context.Context, *FetchOrderBookRequest) (*FetchOrderBookResponse, error)
	CalcMarketOrder(context.Context, *CalcMarketOrderRequest) (*CalcMarketOrderResponse, error)
	FetchMarketPrice(context.Context, *FetchMarketPriceRequest) (*FetchMarketPriceResponse, error)
}

// UnimplementedMatchingEngineServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMatchingEngineServiceServer struct {
}

func (UnimplementedMatchingEngineServiceServer) FetchOrder(context.Context, *FetchOrderRequest) (*FetchOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchOrder not implemented")
}
func (UnimplementedMatchingEngineServiceServer) FetchOrderBook(context.Context, *FetchOrderBookRequest) (*FetchOrderBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchOrderBook not implemented")
}
func (UnimplementedMatchingEngineServiceServer) CalcMarketOrder(context.Context, *CalcMarketOrderRequest) (*CalcMarketOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalcMarketOrder not implemented")
}
func (UnimplementedMatchingEngineServiceServer) FetchMarketPrice(context.Context, *FetchMarketPriceRequest) (*FetchMarketPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchMarketPrice not implemented")
}

// UnsafeMatchingEngineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchingEngineServiceServer will
// result in compilation errors.
type UnsafeMatchingEngineServiceServer interface {
	mustEmbedUnimplementedMatchingEngineServiceServer()
}

func RegisterMatchingEngineServiceServer(s grpc.ServiceRegistrar, srv MatchingEngineServiceServer) {
	s.RegisterService(&MatchingEngineService_ServiceDesc, srv)
}

func _MatchingEngineService_FetchOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingEngineServiceServer).FetchOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GrpcEngine.MatchingEngineService/FetchOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingEngineServiceServer).FetchOrder(ctx, req.(*FetchOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchingEngineService_FetchOrderBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchOrderBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingEngineServiceServer).FetchOrderBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GrpcEngine.MatchingEngineService/FetchOrderBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingEngineServiceServer).FetchOrderBook(ctx, req.(*FetchOrderBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchingEngineService_CalcMarketOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalcMarketOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingEngineServiceServer).CalcMarketOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GrpcEngine.MatchingEngineService/CalcMarketOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingEngineServiceServer).CalcMarketOrder(ctx, req.(*CalcMarketOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchingEngineService_FetchMarketPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchMarketPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingEngineServiceServer).FetchMarketPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GrpcEngine.MatchingEngineService/FetchMarketPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingEngineServiceServer).FetchMarketPrice(ctx, req.(*FetchMarketPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MatchingEngineService_ServiceDesc is the grpc.ServiceDesc for MatchingEngineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatchingEngineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GrpcEngine.MatchingEngineService",
	HandlerType: (*MatchingEngineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchOrder",
			Handler:    _MatchingEngineService_FetchOrder_Handler,
		},
		{
			MethodName: "FetchOrderBook",
			Handler:    _MatchingEngineService_FetchOrderBook_Handler,
		},
		{
			MethodName: "CalcMarketOrder",
			Handler:    _MatchingEngineService_CalcMarketOrder_Handler,
		},
		{
			MethodName: "FetchMarketPrice",
			Handler:    _MatchingEngineService_FetchMarketPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/engine.proto",
}
